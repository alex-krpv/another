//#pragma once
//Задание
// Продолжение
// В первой части сделано:
//Личный бюджет.Часть первая
//Создайте менеджер личного бюджета, хранящий информацию о доходах по дням.
//Задание состоит из трёх частей :
//-Написать программу для ведения личного бюджета.
//-Добавить в неё новый функционал.
//-Добавить тот же новый функционал в чужую эффективную базовую реализацию программы 
//для ведения личного бюджета.Чужой код будет дан в заготовке кода.
//
//Перед вами первая часть.
//Программа должна поддерживать запросы трёх типов :
//1.Поступление средств на счёт за определённый период.
//Распределяет средства равномерно по дням.
//2.Уплата налога 13 %.
//Вычитает 13 процентов из совокупного дохода каждого дня указанного периода, 
//независимо от того, платились ли уже в этот день налоги.
//3.Запрос на выведение дохода.
//Печатает в cout чистую прибыль всех дней на данный момент.
//
//Событие задаётся диапазоном дат.
//Если заработано 100 единиц с 2010 - 01 - 01 по 2010 - 01 - 05, 
//считается, что в каждый из этих пяти дней заработано 20 единиц.
//
//Функция для вычисления количества дней на интервале будет дана в заготовке кода — 
//эта функция использует возможности C, поскольку в C++ календарные функции 
//появились только в стандарте 2020 года и реализованы
//не во всех основных компиляторах.
//
//Формат входных данных
//
//Программа должна обрабатывать такие запросы :
//-ComputeIncome <дата начала> <дата конца> — 
//вычислить чистую прибыль за данный диапазон дат и вывести результат в cout.
//
//-Earn <дата начала> <дата конца> <прибыль> — 
//учесть, что в этот период равномерно по дням была заработана указанная сумма.
//Прибыль — произвольное положительное число double.
//
//-PayTax <дата начала> <дата конца> — заплатить налог 13 % 
//в каждый день указанного диапазона.
//Это означает простое умножение всей прибыли в диапазоне на 0,87, 
//независимо от того, отдавался ли уже налог за какой - либо из указанных дней.
//Прибыль за эти дни, которая обнаружится позже, налогами из прошлого не облагается.
//
//Обе даты — начальная и конечная — включаются в диапазон.
//В первой строке записано количество запросов, а затем на отдельных строках сами запросы.
//
//Формат выходных данных
//
//Каждый запрос типа ComputeIncome выводит на отдельной строке 
//действительное число — чистую прибыль за указанный период.
//Ограничения
//Ограничения на входные данные :
//Все даты находятся в диапазоне от 2000 - 01 - 01 до 2099 - 12 - 31.
//Количество запросов невелико.
//Количество дней в одном запросе — любое в пределах указанного диапазона.
//Дата конца периода не раньше даты начала периода.
//Все даты корректны.
//Вам даётся как минимум один мегабайт оперативной памяти.
//Определите самостоятельно, какого размера структуру 
//вы можете хранить для каждого дня.
//Пример
//Ввод
//8
//Earn 2000-01-02 2000-01-06 20
//ComputeIncome 2000-01-01 2001-01-01
//PayTax 2000-01-02 2000-01-03
//ComputeIncome 2000-01-01 2001-01-01
//Earn 2000-01-03 2000-01-03 10
//ComputeIncome 2000-01-01 2001-01-01
//PayTax 2000-01-03 2000-01-03
//ComputeIncome 2000-01-01 2001-01-01
//
//Вывод
//20
//18.96
//28.96
//27.2076
//Что отправлять на проверку
//Разработайте класс BudgetManager, хранящий данные для выполнения всех указанных запросов.
//Разработайте функцию ParseAndProcessQuery — она читает запрос и разбирает его.
//Как будет тестироваться ваш код
//Мы проверим, что:
//Правильно обрабатывается любая последовательность запросов.
//Правильно обрабатываются крайние случаи — первый и последний день.
//Правильно обрабатываются большие интервалы.
//Правильно обрабатываются малые интервалы.

//ПОДСКАЗКА

//Создайте структуру для информации об одном дне.
//В этой части в ней необходимо иметь единственное поле типа double.
//В классе BudgetManager создайте вектор, содержащий информацию обо всех днях.
//Размер вектора вычислите, исходя из расстояния от первого до последнего дня.
//Номер дня — это расстояние до начального дня.

//В этой задаче удобно создать абстрактный класс для запроса.
//Также можно создать два его наследника : запрос - чтение и запрос - модификация.
//От них можно наследоваться всем остальным запросам.

//Задание
//Личный бюджет.Часть вторая
//Добавьте в менеджер личного бюджета поддержку нового запроса :
//Трата средств.Разбивает указанную сумму на все дни.
//Теперь чистая прибыль вычисляется как разница заработанного и потраченного.
//Траты не влияют на налогообложение.
//Таким образом, чистая прибыль за день может стать отрицательной.
//Кроме того, добавьте в запрос PayTax возможность указывать процентную ставку налога.
//Формат входных данных
//Программа должна обрабатывать такие запросы :
//Spend <дата начала> <дата конца> <расход> — учесть, 
//что в этот период равномерно по дням была потрачена указанная сумма.
//
//PayTax <дата начала> <дата конца> <ставка> — заплатить налог в каждый день указанного диапазона.
//Ставка — целое число от 0 до 100.
//
//Остальные запросы остаются без изменений.Учтите, что траты не влияют на сумму налога.
//Формат выходных данных
//Формат выходных данных остаётся без изменений.
//Ограничения
//Те же, что и в задаче предыдущего урока.
//Пример
//Ввод
//8
//Earn 2000 - 01 - 02 2000 - 01 - 06 20
//ComputeIncome 2000 - 01 - 01 2001 - 01 - 01
//PayTax 2000 - 01 - 02 2000 - 01 - 03 13
//ComputeIncome 2000 - 01 - 01 2001 - 01 - 01
//Spend 2000 - 12 - 30 2001 - 01 - 02 14
//ComputeIncome 2000 - 01 - 01 2001 - 01 - 01
//PayTax 2000 - 12 - 30 2000 - 12 - 30 13
//ComputeIncome 2000 - 01 - 01 2001 - 01 - 01
//Вывод
//20
//18.96
//8.46
//8.46
//Что отправлять на проверку
//Модифицируйте своё решение первой части так, чтобы оно правильно работало с обновлёнными запросами.
//Как будет тестироваться ваш код
//Проверки такие же, как и в предыдущей задаче :
//Правильно обрабатывается любая последовательность запросов.
//Правильно обрабатываются крайние случаи — первый и последний день.
//Правильно обрабатываются большие интервалы.
//Правильно обрабатываются малые интервалы.